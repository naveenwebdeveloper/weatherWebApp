{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["City","label","value","App","useState","cityIs","setCity","weatherData","setweatherData","celsius","setCelsius","minTemp","setminTemp","maxTemp","setmaxTemp","weatherfom","setweatherFom","fatchingData","a","fetch","method","headers","body","JSON","stringify","res","json","data","main","temp","toFixed","temp_max","temp_min","weather","console","log","useEffect","className","id","placeholder","options","onChange","changedCity","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PASMA,EAAO,CACX,CAAEC,MAAO,YAAaC,MAAO,KAC7B,CAAED,MAAO,UAAWC,MAAO,IAC3B,CAAED,MAAO,SAAUC,MAAO,IAC1B,CAAED,MAAO,UAAWC,MAAO,KAwEdC,MApEf,WAGE,MAA0BC,mBAAS,aAAnC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAA8BJ,mBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAA8BN,mBAAS,GAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KACA,EAA8BR,mBAAS,GAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KACA,EAAoCV,qBAApC,mBAAOW,EAAP,KAAmBC,EAAnB,KAGMC,EAAY,uCAAG,8BAAAC,EAAA,sEACDC,MAAM,OAAQ,CAC9BC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEnB,aANN,cACboB,EADa,gBAQAA,EAAIC,OARJ,OAQbC,EARa,OASnBnB,EAAemB,GAEfjB,GAAYiB,EAAKC,KAAKC,KAAO,QAAQC,QAAQ,IAC7ChB,GAAYa,EAAKC,KAAKG,SAAW,QAAQD,QAAQ,IACjDlB,GAAYe,EAAKC,KAAKI,SAAW,QAAQF,QAAQ,IACjDd,EAAcW,EAAKM,QAAQ,GAAGL,MAC9BM,QAAQC,IAAIR,EAAKM,QAAQ,GAAGL,MAfT,4CAAH,qDAoClB,OAhBAQ,qBAAU,WACRnB,IACAiB,QAAQC,IAAI5B,KACX,CAACF,IAcF,sBAAKgC,UAAU,MAAf,UACE,uBAAMC,GAAG,OAAT,UACE,cAAC,IAAD,CAAQC,YAAalC,EAAQmC,QAASxC,EAAMyC,SAP9B,SAACC,GACnBpC,EAAQoC,EAAYzC,QAMmDC,MAAOG,IAC1E,sBAAKgC,UAAU,OAAf,UACE,qBAAKA,UAAU,eACf,+BAAK5B,EAAQ,oCAAb,OACA,qBAAK4B,UAAU,kBAEjB,qBAAKA,UAAU,eAAf,SACE,2CAAc1B,EAAQ,uCAAtB,YAAgDE,OAElD,qBAAKwB,UAAU,cAAf,SACGtB,OAGL,sBAAMuB,GAAG,aCpEAK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.278a5111.chunk.js","sourcesContent":["//imorting style sheet\nimport './App.css';\n//use dropdown packege for city inputs. \nimport Select from 'react-select';\n//use useState and useEffect packege\nimport { useState, useEffect } from 'react';\n\n\n//Options in city for Select packege\nconst City = [\n  { label: \"New Delhi\", value: 355 },\n  { label: \"Kolkata\", value: 54 },\n  { label: \"Mumbai\", value: 43 },\n  { label: \"Chennai\", value: 61 }\n];\n\n//Function component \nfunction App() {\n\n  //all useState for input in DOM\n  const [cityIs, setCity] = useState(\"New Delhi\");\n  const [weatherData, setweatherData] = useState({});\n  const [celsius, setCelsius] = useState(0);\n  const [minTemp, setminTemp] = useState(0);\n  const [maxTemp, setmaxTemp] = useState(0);\n  const [weatherfom, setweatherFom] = useState();\n\n  //using fatch api for connect with server\n  const fatchingData = async () => {\n    const res = await fetch(\"/api\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ cityIs })\n    })\n    const data = await res.json();\n    setweatherData(data);\n    //convert Kalvin to celsius and use only one number after point\n    setCelsius((data.main.temp - 273.15).toFixed(1));\n    setmaxTemp((data.main.temp_max - 273.15).toFixed(1));\n    setminTemp((data.main.temp_min - 273.15).toFixed(1));\n    setweatherFom(data.weather[0].main);\n    console.log(data.weather[0].main);\n\n  }\n\n  // useEffect for first render before DOM render\n  useEffect(() => {\n    fatchingData();\n    console.log(weatherData);\n  }, [cityIs]);\n\n\n\n\n  // console.log(fatchingData());\n\n\n\n  const cityChanged = (changedCity) => {\n    setCity(changedCity.label);\n  }\n  //Return JSX\n  return (\n    <div className=\"App\">\n      <form id=\"form\">\n        <Select placeholder={cityIs} options={City} onChange={cityChanged} value={cityIs} />\n        <div className=\"temp\">\n          <div className=\"designOnly\"></div>\n          <h1>{celsius}<sup>o</sup>C</h1>\n          <div className=\"designOnly\"></div>\n        </div>\n        <div className=\"Min-Max-temp\">\n          <h5>Min-temp {minTemp}<span> | </span>Max-temp {maxTemp}</h5>\n        </div>\n        <div className=\"wether-info\">\n          {weatherfom}\n        </div>\n      </form>\n      <main id=\"main\"></main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}